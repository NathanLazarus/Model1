function riskless_r = riskless_r_model1(k,Z,c_input,l_input,dec_c,dec_l,LAMBDAZ,KSTAR,ZSTAR,sigma_Z,BETTA,G,GAMA,ETA,SIGM,intertemporal_euler_sym,DELTA,ALFA,dec_k,nextshock)

% quadpoints = [-0.381186990207322116,...
% 0.3811869902073221168,...
% -1.157193712446780194,...
% 1.1571937124467801947,...
% -1.981656756695842925,...
% 1.9816567566958429258,...
% -2.930637420257244019,...
% 2.9306374202572440192];
% 
% quadweights = [0.661147012558241291,...
% 0.661147012558241291,...
% 0.207802325814891879,...
% 0.207802325814891879,...
% 0.017077983007413475,...
% 0.017077983007413475,...
% 0.000199604072211367,...
% 0.000199604072211367];

quadpoints = [-0.2341791399309906350,...
0.23417913993099063509,...
-0.7036860971700069321,...
0.70368609717000693216,...
-1.1767139584812444474,...
1.17671395848124444742,...
-1.6558743732864224954,...
1.65587437328642249543,...
-2.1442335927985344636,...
2.14423359279853446361,...
-2.6456374410581727007,...
2.64563744105817270079,...
-3.1652659092021374469,...
3.16526590920213744698,...
-3.7107015328778049148,...
3.71070153287780491480,...
-4.2943124805931615157,...
4.29431248059316151575,...
-4.9398341310601758878,...
4.93983413106017588787,...
-5.7092013532052637773,...
5.70920135320526377735];

quadweights = [0.4435452264349593014,...
0.4435452264349593014,...
0.2869714332469071144,...
0.2869714332469071144,...
0.1191023609587824659,...
0.1191023609587824659,...
0.0311403708844238483,...
0.0311403708844238483,...
0.0049783993350516474,...
0.0049783993350516474,...
0.0004648850508842522,...
0.0004648850508842522,...
0.0000236551285525104,...
0.0000236551285525104,...
5.8842875633010057804e-7,...
5.8842875633010057804e-7,...
5.9669909860596527172e-9,...
5.9669909860596527172e-9,...
1.7443390075479928442e-11,...
1.7443390075479928442e-11,...
6.1671834244040488352e-15,...
6.1671834244040488352e-15];

%points and weights from https://github.com/sivaramambikasaran/Quadrature/blob/master/Gauss_Hermite/weights/weights8
   
c = c_input; %used in eval(intertemporal_euler_sym)
l = l_input; %used in the multiplicative utility case (l_plus and l don't cancel)

quad = 0;
for i=1:length(quadpoints)
    cp = decision_func(dec_c,[k Z^LAMBDAZ*exp(sqrt(2)*quadpoints(i)).^sigma_Z],[KSTAR ZSTAR],sigma_Z);
    lp = decision_func(dec_l,[k Z^LAMBDAZ*exp(sqrt(2)*quadpoints(i)).^sigma_Z],[KSTAR ZSTAR],sigma_Z);
%     kpp = decision_func(dec_k,[k Z^LAMBDAZ*exp(sqrt(2)*quadpoints(i)).^sigma_Z],[KSTAR ZSTAR],sigma_Z);
%     cp = (1-DELTA) * k + y_func(k,lp,Z^LAMBDAZ*exp(sqrt(2)*quadpoints(i)).^sigma_Z,ALFA) - G*kpp;
%     rp = (1./P) .* Z^LAMBDAZ*exp(sqrt(2)*quadpoints(i)).^sigma_Z .* ALFA .* k.^(ALFA-1).*lp.^(1-ALFA) - DELTA;
    quad = quad + quadweights(i)*(1/sqrt(pi))*(1/(BETTA*eval(intertemporal_euler_sym)));
end
% cp = decision_func(dec_c,[k Z^LAMBDAZ*exp(nextshock)],[KSTAR ZSTAR],sigma_Z);
% lp = decision_func(dec_l,[k Z^LAMBDAZ*exp(nextshock)],[KSTAR ZSTAR],sigma_Z);
% quad = (1/(BETTA*eval(intertemporal_euler_sym)));
riskless_r = quad - 1;
% fprintf('%.25g Zplus\n',Z^LAMBDAZ*exp(nextshock))
