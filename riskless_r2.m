function riskless_r = riskless_r2(k,Z,c_input,l_input,dec_c,dec_l,LAMBDAZ,KSTAR,ZSTAR,sigma_Z,BETTA,G,GAMA,ETA,SIGM,intertemporal_euler_sym)

quadpoints = [-0.381186990207322116,...
0.3811869902073221168,...
-1.157193712446780194,...
1.1571937124467801947,...
-1.981656756695842925,...
1.9816567566958429258,...
-2.930637420257244019,...
2.9306374202572440192];

quadweights = [0.661147012558241291,...
0.661147012558241291,...
0.207802325814891879,...
0.207802325814891879,...
0.017077983007413475,...
0.017077983007413475,...
0.000199604072211367,...
0.000199604072211367];

%points and weights from https://github.com/sivaramambikasaran/Quadrature/blob/master/Gauss_Hermite/weights/weights8
   
quad = 0;
c = c_input; %used in eval(intertemporal_euler_sym)
l = l_input; %used in the multiplicative utility case (l_plus and l don't cancel)

for i=1:length(quadpoints)
    cp = decision_func(dec_c,[k Z^LAMBDAZ*exp(sqrt(2)*quadpoints(i)).^sigma_Z],[KSTAR ZSTAR],sigma_Z);
    lp = decision_func(dec_l,[k Z^LAMBDAZ*exp(sqrt(2)*quadpoints(i)).^sigma_Z],[KSTAR ZSTAR],sigma_Z);
    quad = quad + quadweights(i)*(1/sqrt(pi))*(1/(BETTA*eval(intertemporal_euler_sym)));
end
riskless_r = quad - 1;