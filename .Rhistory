result
result[1:5]
asdf
asdf[100,]=c(99,98,97,96,95,-10)
asdf
# asdf = matrix(runif(N_rounds*N_sim),nrow = N_sim)
permutation_indices_for_one_sim = permuteGeneral(N_rounds)
N_perm = factorial(N_rounds)
permutation_indices = N_sim*permutation_indices_for_one_sim[
rep(1:N_perm,N_sim*N_rounds) +
rep((0:(N_rounds-1))*N_perm,each=N_perm*N_sim)] -
rep(rep((N_sim-1):0,each=N_perm),times=N_rounds)
proposals = matrix(asdf[permutation_indices],ncol = N_rounds)
proposals = data.table(proposals)
proposals[,sim:=rep(1:N_sim,each=factorial(N_rounds))]
# apply(asdf,1,permuteGeneral,m=N_rounds)
proposal_indices = rep(1:factorial(N_rounds),each = nrow(choices))
choices = data.table(permuteGeneral(0:1, freqs = rep(N_rounds/2,2)))
setnames(choices,gsub('V','c',names(choices)))
setnames(proposals,gsub('V','p',names(proposals)))
proposal_indices = rep(1:nrow(proposals),each = nrow(choices))
choice_indices = rep(1:nrow(choices),times = nrow(proposals))
together = cbind(choices[choice_indices],proposals[proposal_indices])
# choices[,cartesian_dummy:=1]
# proposals[,cartesian_dummy:=1]
# setkey(choices,cartesian_dummy)
# setkey(proposals,cartesian_dummy)
# together = choices[proposals,allow.cartesian=T][,cartesian_dummy:=NULL]
#
setkey(together,sim,p1,c1,p2,c2,p3,c3,p4,c4,p5,c5,p6,c6)
together[,ua:=2*(p1*c1+p2*c2+p3*c3+p4*c4+p5*c5+p6*c6) - (p1+p2+p3+p4+p5+p6)]
together[,happensC5:=ua==min(ua),.(sim,p1,c1,p2,c2,p3,c3,p4,c4,p5)
][happensC5==T,happensP5:=ua==max(ua),.(sim,p1,c1,p2,c2,p3,c3,p4,c4)
][,happensC4:=ua==min(ua),.(sim,p1,c1,p2,c2,p3,c3,p4)
][happensC4==T,happensP4:=ua==max(ua),.(sim,p1,c1,p2,c2,p3,c3)
][,happensC3:=ua==min(ua),.(sim,p1,c1,p2,c2,p3)
][happensC3==T,happensP3:=ua==max(ua),.(sim,p1,c1,p2,c2)
][happensP3==T,happensC2:=ua==max(ua),.(sim,p1,c1,p2)
][happensC2==T,happensP2:=ua==min(ua),.(sim,p1,c1)
][happensP2==T,happensC1:=ua==min(ua),.(sim,p1)
][happensC1==T,happensP1:=ua==max(ua),.(sim)
]
result = unique(together[happensP1==T],by='sim')
result = cbind(result,data.table(t(apply(as.matrix(result[,p1:p6]),1,frank))))
primes = primeSieve(100)-1
result[,a_gets:=(1+c1*primes[V1])*(1+c2*primes[V2])*(1+c3*primes[V3])*(1+c4*primes[V4])*(1+c5*primes[V5])*(1+c6*primes[V6])]
# setkey(together,sim,p1,c1,p2,c2,p3,c3,p4,c4)
# together[,ua:=2*(p1*c1+p2*c2+p3*c3+p4*c4) - (p1+p2+p3+p4)]
#
# together[,happensC3:=ua==min(ua),.(sim,p1,c1,p2,c2,p3)
#                  ][happensC3==T,happensP3:=ua==max(ua),.(sim,p1,c1,p2,c2)
#                    ][happensP3==T,happensC2:=ua==max(ua),.(sim,p1,c1,p2)
#                      ][happensC2==T,happensP2:=ua==min(ua),.(sim,p1,c1)
#                        ][happensP2==T,happensC1:=ua==min(ua),.(sim,p1)
#                          ][happensC1==T,happensP1:=ua==max(ua),.(sim)
#                            ]
})
# together[,rowmin:=pmin(p1,p2,p3,p4)]
# together[,second:=pmin(p1+200*(p1==rowmin),p2+200*(p2==rowmin),p3+200*(p3==rowmin),p4+200*(p4==rowmin))]
# together[,rowmax:=pmax(p1,p2,p3,p4)]
# together[,third:=pmax(p1-200*(p1==rowmax),p2-200*(p2==rowmax),p3-200*(p3==rowmax),p4-200*(p4==rowmax))]
# together[,onepossibility:=second+third-rowmin-rowmax]
# together[,theoreticalua:=-abs(onepossibility)]
# test = together[happensP1==T&ua!=theoreticalua]
result[sim==100]
together[sim==100&p1==99]
asdf[100,]=c(1,2,3,4,5,100)
permutation_indices_for_one_sim = permuteGeneral(N_rounds)
N_perm = factorial(N_rounds)
permutation_indices = N_sim*permutation_indices_for_one_sim[
rep(1:N_perm,N_sim*N_rounds) +
rep((0:(N_rounds-1))*N_perm,each=N_perm*N_sim)] -
rep(rep((N_sim-1):0,each=N_perm),times=N_rounds)
proposals = matrix(asdf[permutation_indices],ncol = N_rounds)
proposals = data.table(proposals)
proposals[,sim:=rep(1:N_sim,each=factorial(N_rounds))]
# apply(asdf,1,permuteGeneral,m=N_rounds)
proposal_indices = rep(1:factorial(N_rounds),each = nrow(choices))
choices = data.table(permuteGeneral(0:1, freqs = rep(N_rounds/2,2)))
setnames(choices,gsub('V','c',names(choices)))
setnames(proposals,gsub('V','p',names(proposals)))
proposal_indices = rep(1:nrow(proposals),each = nrow(choices))
choice_indices = rep(1:nrow(choices),times = nrow(proposals))
together = cbind(choices[choice_indices],proposals[proposal_indices])
# choices[,cartesian_dummy:=1]
# proposals[,cartesian_dummy:=1]
# setkey(choices,cartesian_dummy)
# setkey(proposals,cartesian_dummy)
# together = choices[proposals,allow.cartesian=T][,cartesian_dummy:=NULL]
#
setkey(together,sim,p1,c1,p2,c2,p3,c3,p4,c4,p5,c5,p6,c6)
together[,ua:=2*(p1*c1+p2*c2+p3*c3+p4*c4+p5*c5+p6*c6) - (p1+p2+p3+p4+p5+p6)]
together[,happensC5:=ua==min(ua),.(sim,p1,c1,p2,c2,p3,c3,p4,c4,p5)
][happensC5==T,happensP5:=ua==max(ua),.(sim,p1,c1,p2,c2,p3,c3,p4,c4)
][,happensC4:=ua==min(ua),.(sim,p1,c1,p2,c2,p3,c3,p4)
][happensC4==T,happensP4:=ua==max(ua),.(sim,p1,c1,p2,c2,p3,c3)
][,happensC3:=ua==min(ua),.(sim,p1,c1,p2,c2,p3)
][happensC3==T,happensP3:=ua==max(ua),.(sim,p1,c1,p2,c2)
][happensP3==T,happensC2:=ua==max(ua),.(sim,p1,c1,p2)
][happensC2==T,happensP2:=ua==min(ua),.(sim,p1,c1)
][happensP2==T,happensC1:=ua==min(ua),.(sim,p1)
][happensC1==T,happensP1:=ua==max(ua),.(sim)
]
result = unique(together[happensP1==T],by='sim')
result = cbind(result,data.table(t(apply(as.matrix(result[,p1:p6]),1,frank))))
primes = primeSieve(100)-1
result[,a_gets:=(1+c1*primes[V1])*(1+c2*primes[V2])*(1+c3*primes[V3])*(1+c4*primes[V4])*(1+c5*primes[V5])*(1+c6*primes[V6])]
# setkey(together,sim,p1,c1,p2,c2,p3,c3,p4,c4)
# together[,ua:=2*(p1*c1+p2*c2+p3*c3+p4*c4) - (p1+p2+p3+p4)]
#
# together[,happensC3:=ua==min(ua),.(sim,p1,c1,p2,c2,p3)
#                  ][happensC3==T,happensP3:=ua==max(ua),.(sim,p1,c1,p2,c2)
#                    ][happensP3==T,happensC2:=ua==max(ua),.(sim,p1,c1,p2)
#                      ][happensC2==T,happensP2:=ua==min(ua),.(sim,p1,c1)
#                        ][happensP2==T,happensC1:=ua==min(ua),.(sim,p1)
#                          ][happensC1==T,happensP1:=ua==max(ua),.(sim)
#                            ]
})
# together[,rowmin:=pmin(p1,p2,p3,p4)]
# together[,second:=pmin(p1+200*(p1==rowmin),p2+200*(p2==rowmin),p3+200*(p3==rowmin),p4+200*(p4==rowmin))]
# together[,rowmax:=pmax(p1,p2,p3,p4)]
# together[,third:=pmax(p1-200*(p1==rowmax),p2-200*(p2==rowmax),p3-200*(p3==rowmax),p4-200*(p4==rowmax))]
# together[,onepossibility:=second+third-rowmin-rowmax]
# together[,theoreticalua:=-abs(onepossibility)]
# test = together[happensP1==T&ua!=theoreticalua]
result[sim==100]
together[sim==100&p1==5&c1==1]
together[sim==100&p1==5&c1==1&p6==100&c6==1]
issue = together[sim==100&p1==5&c1==1&p6==100&c6==1]
View(issue)
issue = together[sim==100&p1==5&c1==1&c2==0&c3==1&c4==0&c5==1&p6==100&c6==1]
together[sim==100&p1==5&c1==1&c2==0&c3==1&c4==0&c5==1&p6==100&c6==1]
together[sim==100&p1==5&c1==1&p6==100&c6==1]
issue = together[sim==100&p1==5&c1==1&p6==100&c6==1]
nrow(together[sim==100&p1==5&c1==1&c2==0&c3==0&c4==1&p6==100&c6==1])
issue = together[sim==100&p1==5&c1==1&p6==100&c6==0]
View(issue)
issue = together[sim==100&p1==5]
issue = together[sim==100&p1==5&happensP2==T]
View(issue)
library(profvis)
profvis({
library(RcppAlgos)
library(foreach)
library(iterators)
set.seed(12)
N_sim = 100
N_rounds = 6
asdf = t((apply(matrix(runif(199*N_sim),nrow = N_sim),1,frank)-100)[1:N_rounds,])
# asdf = matrix(runif(N_rounds*N_sim),nrow = N_sim)
permutation_indices_for_one_sim = permuteGeneral(N_rounds)
N_perm = factorial(N_rounds)
permutation_indices = N_sim*permutation_indices_for_one_sim[
rep(1:N_perm,N_sim*N_rounds) +
rep((0:(N_rounds-1))*N_perm,each=N_perm*N_sim)] -
rep(rep((N_sim-1):0,each=N_perm),times=N_rounds)
proposals = matrix(asdf[permutation_indices],ncol = N_rounds)
proposals = data.table(proposals)
proposals[,sim:=rep(1:N_sim,each=factorial(N_rounds))]
# apply(asdf,1,permuteGeneral,m=N_rounds)
proposal_indices = rep(1:factorial(N_rounds),each = nrow(choices))
choices = data.table(permuteGeneral(0:1, freqs = rep(N_rounds/2,2)))
setnames(choices,gsub('V','c',names(choices)))
setnames(proposals,gsub('V','p',names(proposals)))
proposal_indices = rep(1:nrow(proposals),each = nrow(choices))
choice_indices = rep(1:nrow(choices),times = nrow(proposals))
together = cbind(choices[choice_indices],proposals[proposal_indices])
# choices[,cartesian_dummy:=1]
# proposals[,cartesian_dummy:=1]
# setkey(choices,cartesian_dummy)
# setkey(proposals,cartesian_dummy)
# together = choices[proposals,allow.cartesian=T][,cartesian_dummy:=NULL]
#
setkey(together,sim,p1,c1,p2,c2,p3,c3,p4,c4,p5,c5,p6,c6)
together[,ua:=2*(p1*c1+p2*c2+p3*c3+p4*c4+p5*c5+p6*c6) - (p1+p2+p3+p4+p5+p6)]
together[,happensC5:=ua==max(ua),.(sim,p1,c1,p2,c2,p3,c3,p4,c4,p5)
][happensC5==T,happensP5:=ua==min(ua),.(sim,p1,c1,p2,c2,p3,c3,p4,c4)
][,happensC4:=ua==min(ua),.(sim,p1,c1,p2,c2,p3,c3,p4)
][happensC4==T,happensP4:=ua==min(ua),.(sim,p1,c1,p2,c2,p3,c3)
][,happensC3:=ua==min(ua),.(sim,p1,c1,p2,c2,p3)
][happensC3==T,happensP3:=ua==max(ua),.(sim,p1,c1,p2,c2)
][happensP3==T,happensC2:=ua==max(ua),.(sim,p1,c1,p2)
][happensC2==T,happensP2:=ua==min(ua),.(sim,p1,c1)
][happensP2==T,happensC1:=ua==min(ua),.(sim,p1)
][happensC1==T,happensP1:=ua==max(ua),.(sim)
]
result = unique(together[happensP1==T],by='sim')
result = cbind(result,data.table(t(apply(as.matrix(result[,p1:p6]),1,frank))))
primes = primeSieve(100)-1
result[,a_gets:=(1+c1*primes[V1])*(1+c2*primes[V2])*(1+c3*primes[V3])*(1+c4*primes[V4])*(1+c5*primes[V5])*(1+c6*primes[V6])]
# setkey(together,sim,p1,c1,p2,c2,p3,c3,p4,c4)
# together[,ua:=2*(p1*c1+p2*c2+p3*c3+p4*c4) - (p1+p2+p3+p4)]
#
# together[,happensC3:=ua==min(ua),.(sim,p1,c1,p2,c2,p3)
#                  ][happensC3==T,happensP3:=ua==max(ua),.(sim,p1,c1,p2,c2)
#                    ][happensP3==T,happensC2:=ua==max(ua),.(sim,p1,c1,p2)
#                      ][happensC2==T,happensP2:=ua==min(ua),.(sim,p1,c1)
#                        ][happensP2==T,happensC1:=ua==min(ua),.(sim,p1)
#                          ][happensC1==T,happensP1:=ua==max(ua),.(sim)
#                            ]
})
# together[,rowmin:=pmin(p1,p2,p3,p4)]
# together[,second:=pmin(p1+200*(p1==rowmin),p2+200*(p2==rowmin),p3+200*(p3==rowmin),p4+200*(p4==rowmin))]
# together[,rowmax:=pmax(p1,p2,p3,p4)]
# together[,third:=pmax(p1-200*(p1==rowmax),p2-200*(p2==rowmax),p3-200*(p3==rowmax),p4-200*(p4==rowmax))]
# together[,onepossibility:=second+third-rowmin-rowmax]
# together[,theoreticalua:=-abs(onepossibility)]
# test = together[happensP1==T&ua!=theoreticalua]
table(result$a_gets)
library(profvis)
profvis({
library(RcppAlgos)
library(foreach)
library(iterators)
set.seed(12)
N_sim = 100
N_rounds = 6
asdf = t((apply(matrix(runif(199*N_sim),nrow = N_sim),1,frank)-100)[1:N_rounds,])
# asdf = matrix(runif(N_rounds*N_sim),nrow = N_sim)
permutation_indices_for_one_sim = permuteGeneral(N_rounds)
N_perm = factorial(N_rounds)
permutation_indices = N_sim*permutation_indices_for_one_sim[
rep(1:N_perm,N_sim*N_rounds) +
rep((0:(N_rounds-1))*N_perm,each=N_perm*N_sim)] -
rep(rep((N_sim-1):0,each=N_perm),times=N_rounds)
proposals = matrix(asdf[permutation_indices],ncol = N_rounds)
proposals = data.table(proposals)
proposals[,sim:=rep(1:N_sim,each=factorial(N_rounds))]
# apply(asdf,1,permuteGeneral,m=N_rounds)
proposal_indices = rep(1:factorial(N_rounds),each = nrow(choices))
choices = data.table(permuteGeneral(0:1, freqs = rep(N_rounds/2,2)))
setnames(choices,gsub('V','c',names(choices)))
setnames(proposals,gsub('V','p',names(proposals)))
proposal_indices = rep(1:nrow(proposals),each = nrow(choices))
choice_indices = rep(1:nrow(choices),times = nrow(proposals))
together = cbind(choices[choice_indices],proposals[proposal_indices])
# choices[,cartesian_dummy:=1]
# proposals[,cartesian_dummy:=1]
# setkey(choices,cartesian_dummy)
# setkey(proposals,cartesian_dummy)
# together = choices[proposals,allow.cartesian=T][,cartesian_dummy:=NULL]
#
setkey(together,sim,p1,c1,p2,c2,p3,c3,p4,c4,p5,c5,p6,c6)
together[,ua:=2*(p1*c1+p2*c2+p3*c3+p4*c4+p5*c5+p6*c6) - (p1+p2+p3+p4+p5+p6)]
together[,happensC5:=ua==min(ua),.(sim,p1,c1,p2,c2,p3,c3,p4,c4,p5)
][happensC5==T,happensP5:=ua==max(ua),.(sim,p1,c1,p2,c2,p3,c3,p4,c4)
][,happensC4:=ua==max(ua),.(sim,p1,c1,p2,c2,p3,c3,p4)
][happensC4==T,happensP4:=ua==min(ua),.(sim,p1,c1,p2,c2,p3,c3)
][,happensC3:=ua==min(ua),.(sim,p1,c1,p2,c2,p3)
][happensC3==T,happensP3:=ua==max(ua),.(sim,p1,c1,p2,c2)
][happensP3==T,happensC2:=ua==max(ua),.(sim,p1,c1,p2)
][happensC2==T,happensP2:=ua==min(ua),.(sim,p1,c1)
][happensP2==T,happensC1:=ua==min(ua),.(sim,p1)
][happensC1==T,happensP1:=ua==max(ua),.(sim)
]
result = unique(together[happensP1==T],by='sim')
result = cbind(result,data.table(t(apply(as.matrix(result[,p1:p6]),1,frank))))
primes = primeSieve(100)-1
result[,a_gets:=(1+c1*primes[V1])*(1+c2*primes[V2])*(1+c3*primes[V3])*(1+c4*primes[V4])*(1+c5*primes[V5])*(1+c6*primes[V6])]
# setkey(together,sim,p1,c1,p2,c2,p3,c3,p4,c4)
# together[,ua:=2*(p1*c1+p2*c2+p3*c3+p4*c4) - (p1+p2+p3+p4)]
#
# together[,happensC3:=ua==min(ua),.(sim,p1,c1,p2,c2,p3)
#                  ][happensC3==T,happensP3:=ua==max(ua),.(sim,p1,c1,p2,c2)
#                    ][happensP3==T,happensC2:=ua==max(ua),.(sim,p1,c1,p2)
#                      ][happensC2==T,happensP2:=ua==min(ua),.(sim,p1,c1)
#                        ][happensP2==T,happensC1:=ua==min(ua),.(sim,p1)
#                          ][happensC1==T,happensP1:=ua==max(ua),.(sim)
#                            ]
})
# together[,rowmin:=pmin(p1,p2,p3,p4)]
# together[,second:=pmin(p1+200*(p1==rowmin),p2+200*(p2==rowmin),p3+200*(p3==rowmin),p4+200*(p4==rowmin))]
# together[,rowmax:=pmax(p1,p2,p3,p4)]
# together[,third:=pmax(p1-200*(p1==rowmax),p2-200*(p2==rowmax),p3-200*(p3==rowmax),p4-200*(p4==rowmax))]
# together[,onepossibility:=second+third-rowmin-rowmax]
# together[,theoreticalua:=-abs(onepossibility)]
# test = together[happensP1==T&ua!=theoreticalua]
library(profvis)
profvis({
library(RcppAlgos)
library(foreach)
library(iterators)
set.seed(12)
N_sim = 100
N_rounds = 6
asdf = t((apply(matrix(runif(199*N_sim),nrow = N_sim),1,frank)-100)[1:N_rounds,])
# asdf = matrix(runif(N_rounds*N_sim),nrow = N_sim)
permutation_indices_for_one_sim = permuteGeneral(N_rounds)
N_perm = factorial(N_rounds)
permutation_indices = N_sim*permutation_indices_for_one_sim[
rep(1:N_perm,N_sim*N_rounds) +
rep((0:(N_rounds-1))*N_perm,each=N_perm*N_sim)] -
rep(rep((N_sim-1):0,each=N_perm),times=N_rounds)
proposals = matrix(asdf[permutation_indices],ncol = N_rounds)
proposals = data.table(proposals)
proposals[,sim:=rep(1:N_sim,each=factorial(N_rounds))]
# apply(asdf,1,permuteGeneral,m=N_rounds)
proposal_indices = rep(1:factorial(N_rounds),each = nrow(choices))
choices = data.table(permuteGeneral(0:1, freqs = rep(N_rounds/2,2)))
setnames(choices,gsub('V','c',names(choices)))
setnames(proposals,gsub('V','p',names(proposals)))
proposal_indices = rep(1:nrow(proposals),each = nrow(choices))
choice_indices = rep(1:nrow(choices),times = nrow(proposals))
together = cbind(choices[choice_indices],proposals[proposal_indices])
# choices[,cartesian_dummy:=1]
# proposals[,cartesian_dummy:=1]
# setkey(choices,cartesian_dummy)
# setkey(proposals,cartesian_dummy)
# together = choices[proposals,allow.cartesian=T][,cartesian_dummy:=NULL]
#
setkey(together,sim,p1,c1,p2,c2,p3,c3,p4,c4,p5,c5,p6,c6)
together[,ua:=2*(p1*c1+p2*c2+p3*c3+p4*c4+p5*c5+p6*c6) - (p1+p2+p3+p4+p5+p6)]
together[,happensC5:=ua==min(ua),.(sim,p1,c1,p2,c2,p3,c3,p4,c4,p5)
][happensC5==T,happensP5:=ua==max(ua),.(sim,p1,c1,p2,c2,p3,c3,p4,c4)
][happensP5==T,happensC4:=ua==max(ua),.(sim,p1,c1,p2,c2,p3,c3,p4)
][happensC4==T,happensP4:=ua==min(ua),.(sim,p1,c1,p2,c2,p3,c3)
][happensP4==T,happensC3:=ua==min(ua),.(sim,p1,c1,p2,c2,p3)
][happensC3==T,happensP3:=ua==max(ua),.(sim,p1,c1,p2,c2)
][happensP3==T,happensC2:=ua==max(ua),.(sim,p1,c1,p2)
][happensC2==T,happensP2:=ua==min(ua),.(sim,p1,c1)
][happensP2==T,happensC1:=ua==min(ua),.(sim,p1)
][happensC1==T,happensP1:=ua==max(ua),.(sim)
]
result = unique(together[happensP1==T],by='sim')
result = cbind(result,data.table(t(apply(as.matrix(result[,p1:p6]),1,frank))))
primes = primeSieve(100)-1
result[,a_gets:=(1+c1*primes[V1])*(1+c2*primes[V2])*(1+c3*primes[V3])*(1+c4*primes[V4])*(1+c5*primes[V5])*(1+c6*primes[V6])]
# setkey(together,sim,p1,c1,p2,c2,p3,c3,p4,c4)
# together[,ua:=2*(p1*c1+p2*c2+p3*c3+p4*c4) - (p1+p2+p3+p4)]
#
# together[,happensC3:=ua==min(ua),.(sim,p1,c1,p2,c2,p3)
#                  ][happensC3==T,happensP3:=ua==max(ua),.(sim,p1,c1,p2,c2)
#                    ][happensP3==T,happensC2:=ua==max(ua),.(sim,p1,c1,p2)
#                      ][happensC2==T,happensP2:=ua==min(ua),.(sim,p1,c1)
#                        ][happensP2==T,happensC1:=ua==min(ua),.(sim,p1)
#                          ][happensC1==T,happensP1:=ua==max(ua),.(sim)
#                            ]
})
# together[,rowmin:=pmin(p1,p2,p3,p4)]
# together[,second:=pmin(p1+200*(p1==rowmin),p2+200*(p2==rowmin),p3+200*(p3==rowmin),p4+200*(p4==rowmin))]
# together[,rowmax:=pmax(p1,p2,p3,p4)]
# together[,third:=pmax(p1-200*(p1==rowmax),p2-200*(p2==rowmax),p3-200*(p3==rowmax),p4-200*(p4==rowmax))]
# together[,onepossibility:=second+third-rowmin-rowmax]
# together[,theoreticalua:=-abs(onepossibility)]
# test = together[happensP1==T&ua!=theoreticalua]
table(result$a_gets)
result[1:5]
library(RcppAlgos)
library(foreach)
library(iterators)
set.seed(12)
N_sim = 100
N_rounds = 6
asdf = t((apply(matrix(runif(199*N_sim),nrow = N_sim),1,frank)-100)[1:N_rounds,])
asdf[100,]=c(1,2,3,4,5,100)
# asdf = matrix(runif(N_rounds*N_sim),nrow = N_sim)
permutation_indices_for_one_sim = permuteGeneral(N_rounds)
N_perm = factorial(N_rounds)
permutation_indices = N_sim*permutation_indices_for_one_sim[
rep(1:N_perm,N_sim*N_rounds) +
rep((0:(N_rounds-1))*N_perm,each=N_perm*N_sim)] -
rep(rep((N_sim-1):0,each=N_perm),times=N_rounds)
proposals = matrix(asdf[permutation_indices],ncol = N_rounds)
proposals = data.table(proposals)
proposals[,sim:=rep(1:N_sim,each=factorial(N_rounds))]
# apply(asdf,1,permuteGeneral,m=N_rounds)
proposal_indices = rep(1:factorial(N_rounds),each = nrow(choices))
choices = data.table(permuteGeneral(0:1, freqs = rep(N_rounds/2,2)))
setnames(choices,gsub('V','c',names(choices)))
setnames(proposals,gsub('V','p',names(proposals)))
proposal_indices = rep(1:nrow(proposals),each = nrow(choices))
choice_indices = rep(1:nrow(choices),times = nrow(proposals))
together = cbind(choices[choice_indices],proposals[proposal_indices])
# choices[,cartesian_dummy:=1]
# proposals[,cartesian_dummy:=1]
# setkey(choices,cartesian_dummy)
# setkey(proposals,cartesian_dummy)
# together = choices[proposals,allow.cartesian=T][,cartesian_dummy:=NULL]
#
setkey(together,sim,p1,c1,p2,c2,p3,c3,p4,c4,p5,c5,p6,c6)
together[,ua:=2*(p1*c1+p2*c2+p3*c3+p4*c4+p5*c5+p6*c6) - (p1+p2+p3+p4+p5+p6)]
together[,happensC5:=ua==min(ua),.(sim,p1,c1,p2,c2,p3,c3,p4,c4,p5)
][happensC5==T,happensP5:=ua==max(ua),.(sim,p1,c1,p2,c2,p3,c3,p4,c4)
][happensP5==T,happensC4:=ua==max(ua),.(sim,p1,c1,p2,c2,p3,c3,p4)
][happensC4==T,happensP4:=ua==min(ua),.(sim,p1,c1,p2,c2,p3,c3)
][happensP4==T,happensC3:=ua==min(ua),.(sim,p1,c1,p2,c2,p3)
][happensC3==T,happensP3:=ua==max(ua),.(sim,p1,c1,p2,c2)
][happensP3==T,happensC2:=ua==max(ua),.(sim,p1,c1,p2)
][happensC2==T,happensP2:=ua==min(ua),.(sim,p1,c1)
][happensP2==T,happensC1:=ua==min(ua),.(sim,p1)
][happensC1==T,happensP1:=ua==max(ua),.(sim)
]
result = unique(together[happensP1==T],by='sim')
result = cbind(result,data.table(t(apply(as.matrix(result[,p1:p6]),1,frank))))
primes = primeSieve(100)-1
result[,a_gets:=(1+c1*primes[V1])*(1+c2*primes[V2])*(1+c3*primes[V3])*(1+c4*primes[V4])*(1+c5*primes[V5])*(1+c6*primes[V6])]
# setkey(together,sim,p1,c1,p2,c2,p3,c3,p4,c4)
# together[,ua:=2*(p1*c1+p2*c2+p3*c3+p4*c4) - (p1+p2+p3+p4)]
#
# together[,happensC3:=ua==min(ua),.(sim,p1,c1,p2,c2,p3)
#                  ][happensC3==T,happensP3:=ua==max(ua),.(sim,p1,c1,p2,c2)
#                    ][happensP3==T,happensC2:=ua==max(ua),.(sim,p1,c1,p2)
#                      ][happensC2==T,happensP2:=ua==min(ua),.(sim,p1,c1)
#                        ][happensP2==T,happensC1:=ua==min(ua),.(sim,p1)
#                          ][happensC1==T,happensP1:=ua==max(ua),.(sim)
result[100]
table(result$a_gets)
primeFactorize(78)
which(primeSieve(100)==primeFactorize(78))
table(result$ua)
result[5]
asdf = rnorm(10000)
asdf = rnorm(10000)*0.5
mean(exp(asdf))
asdf = rnorm(100000)*0.5
mean(exp(asdf))
asdf = rnorm(1000000)*0.5
mean(exp(asdf))
asdf = rnorm(100000000)*0.5
mean(exp(asdf))
??arima
arima("C:\Users\Nathan\Downloads\PerturbationMethods\Model1\ar1data.csv")
arima("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1data.csv")
fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1data.csv")
asdf = fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1data.csv")
arima(asdf$vals)
asdf = fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1data.csv")
arima(asdf$vals)
asdf = fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1data.csv")
jkl = fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1dataAlt.csv")
arima(asdf$vals)
summary(arima(asdf$vals))
hm = arima(asdf$vals)
hm$coef
arima(jkl$vals)
hm2 = arima(jkl$vals)
hm2$coef
jkl = fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1dataAlt.csv")
test = fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1dataAlt2.csv")
arima(test)
arima(test)$coef
arima(jkl)
arima(jkl)$coef
arima(asdf)$coef
asdf = fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1data.csv")
jkl = fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1dataAlt.csv")
test = fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1dataAlt2.csv")
arima(asdf)
arima(jkl)
arima(test)
arima(asdf)$coef
arima(jkl)$coef
arima(test)$coef
asdf = log(fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1data.csv"))
jkl = log(fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1dataAlt.csv"))
test = log(fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1dataAlt2.csv"))
arima(asdf)
arima(jkl)
arima(test)
arima(asdf)$coef
arima(jkl)$coef
arima(test)$coef
asdf = log(fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1data.csv"))
jkl = log(fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1dataAlt.csv"))
test = log(fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1dataAlt2.csv"))
arima(asdf)
arima(jkl)
arima(test)
arima(asdf)$coef
arima(jkl)$coef
arima(test)$coef
summary(lm(asdf$vals[1:99999],asdf$vals[2:100000]))
asdf = log(fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1data.csv"))
jkl = log(fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1dataAlt.csv"))
test = log(fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1dataAlt2.csv"))
arima(asdf)
arima(jkl)
arima(test)
arima(asdf)$coef
arima(jkl)$coef
arima(test)$coef
summary(lm(asdf$vals[1:99999]~asdf$vals[2:100000]))
asdf = log(fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1data.csv"))
jkl = log(fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1dataAlt.csv"))
test = log(fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1dataAlt2.csv"))
arima(asdf)
arima(jkl)
arima(test)
arima(asdf)$coef
arima(jkl)$coef
arima(test)$coef
summary(lm(asdf$vals[1:99999]~asdf$vals[2:100000]))
summary(lm(jkl$vals[1:99999]~jkl$vals[2:100000]))
summary(lm(test$vals[1:99999]~test$vals[2:100000]))
asdf = log(fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1data.csv"))
jkl = log(fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1dataAlt.csv"))
test = log(fread("C:/Users/Nathan/Downloads/PerturbationMethods/Model1/ar1dataAlt2.csv"))
arima(asdf)
arima(jkl)
arima(test)
arima(asdf)$coef
arima(jkl)$coef
arima(test)$coef
summary(lm(asdf$vals[1:99999]~asdf$vals[2:100000]))
summary(lm(jkl$vals[1:99999]~jkl$vals[2:100000]))
summary(lm(test$vals[1:99999]~test$vals[2:100000]))
setwd("C:/Users/Nathan/Downloads/PerturbationMethods/Model1")
fread("NLCEQdata.csv")
setwd("C:/Users/Nathan/Downloads/PerturbationMethods/Model1")
x = fread("NLCEQdata.csv")
setwd("C:/Users/Nathan/Downloads/PerturbationMethods/Model1")
x = fread("NLCEQdata.csv")
